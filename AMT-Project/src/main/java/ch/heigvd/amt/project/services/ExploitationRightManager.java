package ch.heigvd.amt.project.services;

import ch.heigvd.amt.project.datastore.exceptions.DuplicateKeyException;
import ch.heigvd.amt.project.datastore.exceptions.KeyNotFoundException;
import ch.heigvd.amt.project.model.ExploitationRight;

import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@Stateless
public class ExploitationRightManager implements ExploitationRightLocal {

    @Resource(lookup = "jdbc/amt_project")
    DataSource dataSource;


    @Override
    public List<ExploitationRight> findAll() {
        List<ExploitationRight> rights = new ArrayList<>();
        Connection connection = null;
        try {
            connection = dataSource.getConnection();

            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM explotationRights");
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {

                rights.add(ExploitationRight.builder()
                .issueDate(rs.getString("issueDate"))
                .monthlyFee(rs.getString("monthlyFee"))
                .duration(rs.getString("duration"))
               .build());
            }

            connection.close();


        } catch (SQLException e) {
            Logger.getLogger(ExploitationRightManager.class.getName()).log(Level.SEVERE, null, e);
        }
        return rights;
    }

    @Override
    public ExploitationRight create(ExploitationRight entity) throws SQLException {
        Connection con = null;
        try {
            con = dataSource.getConnection();
            PreparedStatement statement = con.prepareStatement("INSERT INTO explotationRights ( idField,idFarmer,issueDate,monthlyFee, duration) VALUES ( ?,?,?, ?,?)");
            statement.setInt(1, entity.getField().getIdField());
            statement.setInt(2, entity.getFarmer().getIdFarmer());
            statement.setString(3, entity.getIssueDate());
            statement.setString(4, String.valueOf(entity.getMonthlyFee()));
            statement.setString(5, String.valueOf(entity.getDuration()));
            statement.execute();
            return entity;
        } finally {
            closeConnection(con);
        }
    }

    @Override
    public ExploitationRight findById(String id) throws KeyNotFoundException {
        return null;
    }

    @Override
    public void update(ExploitationRight entity) throws KeyNotFoundException {

        Connection con = null;
        try {
            con = dataSource.getConnection();
            PreparedStatement statement = con.prepareStatement("UPDATE explotationRights SET issueDate=?, monthlyFee=?, duration=?,  WHERE idField = ? AND idFarmer=?");
            statement.setString(1, entity.getIssueDate());
            statement.setString(2, entity.getMonthlyFee());
            statement.setString(3, entity.getDuration());
            statement.setInt(4, entity.getField().getIdField());
            statement.setInt(5, entity.getFarmer().getIdFarmer());
            int numberOfUpdatedUsers = statement.executeUpdate();
            if (numberOfUpdatedUsers != 1) {
                throw new KeyNotFoundException("Could not find exploitation rights ");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new Error(e);
        } finally {
            closeConnection(con);
        }

    }

    @Override
    public void deleteById(String id) throws KeyNotFoundException {

    }

    private void closeConnection(Connection connection) {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


}
