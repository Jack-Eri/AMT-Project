package ch.heigvd.amt.project.services;

import ch.heigvd.amt.project.datastore.exceptions.KeyNotFoundException;
import ch.heigvd.amt.project.model.ExploitationRight;
import ch.heigvd.amt.project.model.Farmer;
import ch.heigvd.amt.project.model.Field;
import ch.heigvd.amt.project.utils.Pagination;
import ch.heigvd.amt.project.utils.PairPK;

import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

@Stateless
public class ExploitationRightManager implements ExploitationRightLocal {

    @Resource(lookup = "jdbc/amt_project")
    DataSource dataSource;

    @Override
    public List<ExploitationRight> findAll(Pagination pagination) {
        List<ExploitationRight> rights = new LinkedList<>();

        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM fields as fi, farmers as fa, exploitationrights as r " +
                            "WHERE r.idField = fi.idField AND r.idFarmer = fa.idFarmer " +
                            "LIMIT ?, ?"
            );

            statement.setInt(1, pagination.getOffset()); // offset
            statement.setInt(2, pagination.getAmount());

            ResultSet results = statement.executeQuery();
            while (results.next()) {
                Field field = Field.builder()
                        .idField(results.getInt("idField"))
                        .size(results.getInt("size"))
                        .build();
                Farmer farmer = Farmer.builder()
                        .idFarmer(results.getInt("idFarmer"))
                        .username(results.getString("username"))
                        .firstName(results.getString("firstName"))
                        .lastName(results.getString("lastName"))
                        .address(results.getString("address"))
                        .email(results.getString("email"))
                        .build();
                rights.add(ExploitationRight.builder()
                        .field(field)
                        .farmer(farmer)
                        .issueDate(results.getDate("issueDate").toString())
                        .monthlyFee(results.getString("monthlyFee"))
                        .duration(results.getString("duration"))
                        .build()
                );
            }

        } catch (SQLException sqlException) {
            rights.clear();
        } finally {
            closeConnection(connection);
        }

        return rights;
    }

    @Override
    public List<ExploitationRight> findAllForFarmer(Farmer farmer, Pagination pagination) {
        List<ExploitationRight> rights = new LinkedList<>();

        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM fields as f, exploitationrights as r " +
                            "WHERE r.idField = f.idField AND r.idFarmer = ? " +
                            "LIMIT ?, ?"
            );

            statement.setInt(1, farmer.getIdFarmer());
            statement.setInt(2, pagination.getOffset());
            statement.setInt(3, pagination.getAmount());

            ResultSet results = statement.executeQuery();
            while (results.next()) {
                Field field = Field.builder()
                        .idField(results.getInt("idField"))
                        .size(results.getInt("size"))
                        .build();
                rights.add(ExploitationRight.builder()
                        .field(field)
                        .farmer(farmer)
                        .issueDate(results.getString("issueDate"))
                        .monthlyFee(results.getString("monthlyFee"))
                        .duration(results.getString("duration"))
                        .build()
                );
            }

        } catch (SQLException sqlException) {
            rights.clear();
        } finally {
            closeConnection(connection);
        }

        return rights;
    }

    @Override
    public ExploitationRight create(ExploitationRight entity) throws SQLException {
        Connection con = null;
        try {
            con = dataSource.getConnection();
            PreparedStatement statement = con.prepareStatement(
                    "INSERT INTO exploitationrights (idField, idFarmer, issueDate, monthlyFee, duration) VALUES ( ?,?,?,?,?)");
            statement.setInt(1, entity.getField().getIdField());
            statement.setInt(2, entity.getFarmer().getIdFarmer());
            statement.setString(3, entity.getIssueDate());
            statement.setString(4, String.valueOf(entity.getMonthlyFee()));
            statement.setString(5, String.valueOf(entity.getDuration()));
            statement.execute();
            return entity;
        } finally {
            closeConnection(con);
        }
    }

    @Override
    public ExploitationRight findById(PairPK ids) throws KeyNotFoundException {
        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM fields as fi, farmers as fa, exploitationrights as r " +
                            "WHERE r.idField = fi.idField AND r.idFarmer = fa.idFarmer " +
                            "AND r.idFarmer = ? AND r.idField = ?"
            );
            statement.setInt(1, ids.getFirst());
            statement.setInt(2, ids.getSecond());
            ResultSet results = statement.executeQuery();

            if (results.next()) {

                Field field = Field.builder()
                        .idField(results.getInt("idField"))
                        .size(results.getInt("size"))
                        .build();
                Farmer farmer = Farmer.builder()
                        .idFarmer(results.getInt("idFarmer"))
                        .username(results.getString("username"))
                        .firstName(results.getString("firstName"))
                        .lastName(results.getString("lastName"))
                        .address(results.getString("address"))
                        .email(results.getString("email"))
                        .build();
                return ExploitationRight.builder()
                        .field(field)
                        .farmer(farmer)
                        .issueDate(results.getDate("issueDate").toString())
                        .monthlyFee(results.getString("monthlyFee"))
                        .duration(results.getString("duration"))
                        .build();
            } else {
                throw new KeyNotFoundException("Could not find exploitationRight!");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            throw new Error(e);
        } finally {
            closeConnection(connection);
        }
    }

    @Override
    public void update(ExploitationRight entity) throws KeyNotFoundException {
        Connection con = null;
        try {
            con = dataSource.getConnection();
            PreparedStatement statement = con.prepareStatement(
                    "UPDATE exploitationRights SET issueDate = ?, monthlyFee = ?, duration = ? " +
                            "WHERE idField = ? AND idFarmer = ?");
            statement.setString(1, entity.getIssueDate());
            statement.setString(2, entity.getMonthlyFee());
            statement.setString(3, entity.getDuration());
            statement.setInt(4, entity.getField().getIdField());
            statement.setInt(5, entity.getFarmer().getIdFarmer());
            int numberOfUpdatedUsers = statement.executeUpdate();
            if (numberOfUpdatedUsers != 1) {
                throw new KeyNotFoundException("Could not find exploitation rights ");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new Error(e);
        } finally {
            closeConnection(con);
        }
    }

    @Override
    public void deleteById(PairPK ids) throws KeyNotFoundException {
        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM exploitationrights WHERE idFarmer = ? AND idField = ?");
            statement.setLong(1, ids.getFirst());
            statement.setLong(2, ids.getSecond());
            if (statement.executeUpdate() != 1) {
                throw new KeyNotFoundException("Could not find the exploitation right!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null)
                closeConnection(connection);
        }
    }

    private void closeConnection(Connection connection) {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
