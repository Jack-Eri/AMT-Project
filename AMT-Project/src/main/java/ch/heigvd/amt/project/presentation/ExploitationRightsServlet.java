package ch.heigvd.amt.project.presentation;

import ch.heigvd.amt.project.datastore.exceptions.KeyNotFoundException;
import ch.heigvd.amt.project.model.ExploitationRight;
import ch.heigvd.amt.project.model.Farmer;
import ch.heigvd.amt.project.model.Field;
import ch.heigvd.amt.project.services.ExploitationRightLocal;
import ch.heigvd.amt.project.services.FarmersManagerLocal;
import ch.heigvd.amt.project.services.FieldManagerLocal;
import ch.heigvd.amt.project.utils.Pagination;
import ch.heigvd.amt.project.utils.PairPK;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet(name = "ExploitationRightsServlet", urlPatterns = "/rights")
public class ExploitationRightsServlet extends HttpServlet {
    private static final int DEFAULT_AMOUNT = 25;
    private static final int DEFAULT_PAGE = 1;

    @EJB
    FarmersManagerLocal farmersManager;
    @EJB
    FieldManagerLocal fieldManager;
    @EJB
    ExploitationRightLocal rightsManager;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Pagination pagination = new Pagination(
                request.getParameter("amount"),
                request.getParameter("page"),
                DEFAULT_AMOUNT, DEFAULT_PAGE);

        request.setAttribute("amount", pagination.getAmount());
        request.setAttribute("page", pagination.getPage());
        request.setAttribute("rights", rightsManager.findAll(pagination));

        response.setContentType("text/html;charset=UTF-8");
        request.getRequestDispatcher("/WEB-INF/pages/exploitationRights.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        if (request.getParameterMap().containsKey("create")) {

            createExploitationRight(request);

        } else if (request.getParameterMap().containsKey("update")) {
            try {
                rightsManager.update(ExploitationRight.builder()
                        .farmer(Farmer.builder()
                                .idFarmer(Integer.parseInt(request.getParameter("idFarmer")))
                                .build())
                        .field(Field.builder()
                                .idField(Integer.parseInt(request.getParameter("idField")))
                                .build())
                        .issueDate(request.getParameter("issueDate"))
                        .monthlyFee(request.getParameter("monthlyFee"))
                        .duration(request.getParameter("duration"))
                        .build()
                );
                request.setAttribute("success", "Field updated");
            } catch (KeyNotFoundException | NumberFormatException e) {
                e.printStackTrace();
                request.setAttribute("error", "Update failed!");
            }

        } else if (request.getParameterMap().containsKey("delete")) {
            boolean success = true;
            try {
                rightsManager.deleteById(new PairPK(
                        Integer.parseInt(request.getParameter("idFarmer")),
                        Integer.parseInt(request.getParameter("idField"))));
            } catch (NumberFormatException | KeyNotFoundException e) {
                success = false;
            }

            if (success) {
                request.setAttribute("success", "Field deleted");
            } else {
                request.setAttribute("error", "Deletion failed!");
            }
        }

        doGet(request, response);
    }

    private void createExploitationRight(HttpServletRequest request) {
        // Get Farmer
        Farmer farmer = null;
        try {
            farmer = farmersManager.findByUser(request.getParameter("username"));
        } catch (KeyNotFoundException e) {
            e.printStackTrace();
            farmer = null;
        }
        if (farmer == null) {
            request.setAttribute("error", "Unknown username!");
            return;
        }

        // Get field
        Field field = null;
        try {
            field = fieldManager.findById(Integer.parseInt(request.getParameter("idField")));
        } catch (KeyNotFoundException e) {
            e.printStackTrace();
            field = null;
        }
        if (field == null) {
            request.setAttribute("error", "Field does not exist!");
            return;
        }

        // Create exploitationRight
        try {
            rightsManager.create(ExploitationRight.builder()
                    .farmer(farmer)
                    .field(field)
                    .issueDate(request.getParameter("issueDate"))
                    .monthlyFee(request.getParameter("monthlyFee"))
                    .duration(request.getParameter("duration"))
                    .build()
            );
            request.setAttribute("success", "Field created");
        } catch (NumberFormatException | SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Creation failed!");
        }
    }
}
