package ch.heigvd.amt.project.presentation;

import ch.heigvd.amt.project.datastore.exceptions.KeyNotFoundException;
import ch.heigvd.amt.project.model.ExploitationRight;
import ch.heigvd.amt.project.model.Farmer;
import ch.heigvd.amt.project.model.Field;
import ch.heigvd.amt.project.services.ExploitationRightLocal;
import ch.heigvd.amt.project.services.FieldManager;
import ch.heigvd.amt.project.services.FieldManagerLocal;
import ch.heigvd.amt.project.utils.Pagination;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

@WebServlet(name = "ExploitationRightsServlet", urlPatterns = "/rights")
public class ExploitationRightsServlet extends HttpServlet {
    private static final int DEFAULT_AMOUNT = 25;
    private static final int DEFAULT_PAGE = 1;

    @EJB
    ExploitationRightLocal rightsManager;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Pagination pagination = new Pagination(
                request.getParameter("amount"),
                request.getParameter("page"),
                DEFAULT_AMOUNT, DEFAULT_PAGE);


        List<ExploitationRight> rights = null;
        try {
            rights = rightsManager.findAll(pagination);
        } catch (SQLException e) {
            rights = new LinkedList<>();
        }

        request.setAttribute("amount", pagination.getAmount());
        request.setAttribute("page", pagination.getPage());
        request.setAttribute("rights", rights);

        response.setContentType("text/html;charset=UTF-8");
        request.getRequestDispatcher("/WEB-INF/pages/exploitationRights.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        if (request.getParameterMap().containsKey("update")) {
            try {
                rightsManager.update(ExploitationRight.builder()
                        .farmer(Farmer.builder()
                                .idFarmer(Integer.parseInt(request.getParameter("idFarmer")))
                                .build())
                        .field(Field.builder()
                                .idField(Integer.parseInt(request.getParameter("idField")))
                                .build())
                        .issueDate(request.getParameter("issueDate"))
                        .monthlyFee(request.getParameter("monthlyFee"))
                        .duration(request.getParameter("duration"))
                        .build()
                );
                request.setAttribute("success", "Field updated");
            } catch (KeyNotFoundException | NumberFormatException e) {
                e.printStackTrace();
                request.setAttribute("error", "Update failed!");
            }

        } else if (request.getParameterMap().containsKey("delete")) {
            boolean success;
            try {
                success = rightsManager.deleteByIds(
                        Integer.parseInt(request.getParameter("idFarmer")),
                        Integer.parseInt(request.getParameter("idField")));
            } catch (NumberFormatException e) {
                success = false;
            }

            if (success) {
                request.setAttribute("success", "Field deleted");
            } else {
                request.setAttribute("error", "Deletion failed!");
            }
        }

        doGet(request, response);
    }
}
