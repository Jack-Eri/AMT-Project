package ch.heigvd.amt.project.Dao;

import ch.heigvd.amt.project.datastore.exceptions.DuplicateKeyException;
import ch.heigvd.amt.project.datastore.exceptions.KeyNotFoundException;
import ch.heigvd.amt.project.model.ExploitationRight;
import ch.heigvd.amt.project.model.Farmer;
import ch.heigvd.amt.project.model.Field;
import ch.heigvd.amt.project.services.*;
import ch.heigvd.amt.project.utils.PairPK;
import org.arquillian.container.chameleon.deployment.api.DeploymentParameters;
import org.arquillian.container.chameleon.deployment.maven.MavenBuild;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.transaction.api.annotation.TransactionMode;
import org.jboss.arquillian.transaction.api.annotation.Transactional;
import org.junit.Test;
import org.junit.runner.RunWith;

import javax.ejb.EJB;
import java.sql.SQLException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

@RunWith(Arquillian.class)
@MavenBuild
@DeploymentParameters(testable = true)
public class ExploitationRightManagerTest {

    @EJB
    FarmersManagerLocal farmersManager;

    @EJB
    FieldManagerLocal fieldManager;

    @EJB
    ExploitationRightLocal rightManager;

    private Farmer farmer = null;
    private Field field = null;
    private PairPK ids = null;

    private void createUserAndField() throws SQLException {
        farmer = farmersManager.create(Farmer.builder()
                .username("potato").email("jack@potato")
                .firstName("jack").lastName("Eri").build());
        field = fieldManager.create(Field.builder().size(42).build());
        ids = new PairPK(farmer.getIdFarmer(), field.getIdField());
    }

    @Test
    @Transactional(TransactionMode.ROLLBACK)
    public void itShouldBePossibleToCreateAndRetrieveARight() throws SQLException, KeyNotFoundException {

        createUserAndField();

        ExploitationRight right = rightManager.create(
                ExploitationRight.builder()
                        .farmer(farmer).field(field)
                        .issueDate("2019-10-10").duration("12").monthlyFee("650").build());

        ExploitationRight rightLoaded = rightManager.findById(ids);

        assertEquals(rightLoaded.getFarmer().getIdFarmer(), right.getFarmer().getIdFarmer());
        assertEquals(rightLoaded.getField().getIdField(), right.getField().getIdField());
    }

    @Test(expected = KeyNotFoundException.class)
    @Transactional(TransactionMode.ROLLBACK)
    public void itShouldBePossibleToDeleteARight() throws KeyNotFoundException, SQLException {

        createUserAndField();

        ExploitationRight right = rightManager.create(
                ExploitationRight.builder()
                        .farmer(farmer).field(field)
                        .issueDate("2019-10-10").duration("12").monthlyFee("650").build());
        rightManager.deleteById(ids);

        // Should throw expected exception (means deletion worked)
        rightManager.findById(ids);
    }

    @Test
    @Transactional(TransactionMode.ROLLBACK)
    public void itShouldBePossibleToUpdateARight() throws DuplicateKeyException, KeyNotFoundException, SQLException {

        createUserAndField();

        ExploitationRight right = rightManager.create(
                ExploitationRight.builder()
                        .farmer(farmer).field(field)
                        .issueDate("2019-10-10").duration("12").monthlyFee("650").build());

        rightManager.update(right.toBuilder().monthlyFee("1250").build());
        ExploitationRight rightModified = rightManager.findById(ids);

        assertEquals(rightModified.getFarmer().getIdFarmer(), right.getFarmer().getIdFarmer());
        assertEquals(rightModified.getField().getIdField(), right.getField().getIdField());
        assertNotEquals(rightModified.getMonthlyFee(), right.getMonthlyFee());
    }
}